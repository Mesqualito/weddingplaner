
/**
* 'User' is a predesigned special entity
* and can not have additional attributes etc.
*
*	List to see User-fields (without constraints, pattern...)
* entity User {
*	login String
*	password String
*	firstName String
*	lastName String
*	email String
*	activated Boolean
*	langKey String
*	imageUrl String
*	activationKey String
*	resetKey String
*	resetDate Instant
* }
*/

entity UserExtra {
    code String required minlength(8) maxlength(15)
    addressLine1 String
    addressLine2 String
    city String
    zipCode String
    country String
    businessPhoneNr String
    privatePhoneNr String
    mobilePhoneNr String
    guestInvitationDate LocalDate
    guestCommitted Boolean
}

enum AllowGroup {
	ADRESSE, EMAIL, TELEFON
}

entity AllowControl {
	allowGroup AllowGroup
}

entity PartyFood {
	foodName String required minlength(6) maxlength(80)
	foodShortDescription String minlength(20) maxlength(1024)
    foodLongDescription TextBlob
    foodQuantityPersons Integer
    foodBestServeTime Instant
    foodProposalAccepted Boolean
}

entity Message {
	messageShortDescription String required minlength(6) maxlength(80)
    messageInitTime Instant
    messageText TextBlob
    messageValidFrom Instant
    messageValidUntil Instant
}

relationship OneToOne {
	UserExtra{user required} to User
}

relationship ManyToOne {
	PartyFood{userExtra} to UserExtra{partyFood(foodName) required}
	AllowControl{controlGroup} to UserExtra{owner}
    Message{from required} to UserExtra{ownedMessage}
}

relationship ManyToMany {
  AllowControl{controlledGroup} to UserExtra{allowedUser}
  Message{to required} to UserExtra{receivedMessage}
}

paginate * with pagination
service * with serviceImpl
